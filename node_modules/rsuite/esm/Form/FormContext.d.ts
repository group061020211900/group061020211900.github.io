import React from 'react';
import { Schema } from 'schema-typed';
import { TypeAttributes } from '../@types/common';
export interface FormContextValue<T = Record<string, any>, errorMsgType = any, E = {
    [P in keyof T]?: errorMsgType;
}> {
    model?: Schema;
    checkTrigger?: TypeAttributes.CheckTrigger;
    formDefaultValue?: T;
    errorFromContext?: boolean;
    readOnly?: boolean;
    plaintext?: boolean;
    disabled?: boolean;
    formError?: E;
    removeFieldValue?: (name: string) => void;
    removeFieldError?: (name: string) => void;
    onFieldChange?: (name: string, value: any, event: React.SyntheticEvent) => void;
    onFieldError?: (name: string, errorMessage: string) => void;
    onFieldSuccess?: (name: string) => void;
}
export declare const FormContext: React.Context<FormContextValue<Record<string, any>, any, {
    [x: string]: any;
}>>;
export declare const FormValueContext: React.Context<Record<string, any> | undefined>;
export declare const FormPlaintextContext: React.Context<boolean>;
export default FormContext;
